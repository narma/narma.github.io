<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Alzo</title>
        <link>https://narma.github.io</link>
        <description>λ</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://narma.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 09 Jan 2015 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>In-browser Redis</title>
                <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
                <link>https://narma.github.io/2015/redis-in-browser/</link>
                <guid>https://narma.github.io/2015/redis-in-browser/</guid>
                <description>&lt;p&gt;Here is a proof of concept &lt;a href=&quot;http:&#x2F;&#x2F;redis.io&quot;&gt;redis&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;kripken.github.io&#x2F;emscripten-site&#x2F;&quot;&gt;emscripten&lt;&#x2F;a&gt; port I have made. 
It hasn&#x27;t required a lot of modifications to work, which mostly are commenting out clustering, persistence, lua, sentinel and other stuff.
Maybe the port has other limitations, I haven&#x27;t done full testing,
but basic stuff works pretty well.
You can try it yourself, autocomplete commands work with the TAB key
(Modern browsers with asm.js support are required for speed).
&lt;br&#x2F;&gt;
&lt;input id=&quot;run&quot; type=&quot;button&quot; value=&quot;Run redis database&quot;&#x2F;&gt;
&lt;small id=&quot;status&quot;&gt;about 700kb scripts will be downloaded&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;terminal&quot; id=&quot;output&quot; rows=&quot;8&quot;&gt;
&lt;&#x2F;div&gt;
&lt;footer&gt;
&lt;br&#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;narma&#x2F;redis&quot;&gt;github fork&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9020245&quot;&gt;Hacker News post&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;footer&gt;
&lt;style&gt;
  #run {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
  }
  #run:hover {
    background-color: #3C9F45;
  }
  #run:disabled {
    background-color: gray;
  }
&lt;&#x2F;style&gt;
&lt;script type=&#x27;text&#x2F;javascript&#x27;&gt;
var statusElement = document.getElementById(&#x27;status&#x27;);

function status(text) {
  console.log(text);
  statusElement.innerHTML = text;
}

var Module = {
    preRun: [],
    postRun: [],
    print: (function() {
      &#x2F;&#x2F;var element = document.getElementById(&#x27;output&#x27;);
      &#x2F;&#x2F;if (element) element.value = &#x27;&#x27;; &#x2F;&#x2F; clear browser cache
      return function(text) {
        text = Array.prototype.slice.call(arguments).join(&#x27; &#x27;);
        console.log(text);
        if (jQuery) {
          jQuery(&#x27;#output&#x27;).terminal().echo(text);
        }
      };
    })(),
    printErr: function(text) {
      text = Array.prototype.slice.call(arguments).join(&#x27; &#x27;);
      if (0) { &#x2F;&#x2F; XXX disabled for safety typeof dump == &#x27;function&#x27;) {
        dump(text + &#x27;\n&#x27;); &#x2F;&#x2F; fast, straight to the real console
      } else {
        console.error(text);
      }
    },
    setStatus: function(text) {
      if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: &#x27;&#x27; };
      if (text === Module.setStatus.text) return;
      var m = text.match(&#x2F;([^(]+)\((\d+(\.\d+)?)\&#x2F;(\d+)\)&#x2F;);
      var now = Date.now();
      statusElement.innerHTML = text;
    },
    totalDependencies: 0
  };
  window.onerror = function(event) {
    Module.setStatus(&#x27;Exception thrown, see JavaScript console&#x27;);
    Module.setStatus = function(text) {
      if (text) Module.printErr(&#x27;[post-exception status] &#x27; + text);
    };
  };
  window.on_redis_ready = function() {
    status(&#x27;ready&#x27;);
    jQuery(&#x27;#output&#x27;).terminal().focus(true);
  }

function loadScript(url, callback) {

    var script = document.createElement(&quot;script&quot;)
    script.type = &quot;text&#x2F;javascript&quot;;
    script.async = true;

    if (script.readyState){  &#x2F;&#x2F;IE
        script.onreadystatechange = function(){
            if (script.readyState == &quot;loaded&quot; ||
                    script.readyState == &quot;complete&quot;){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else {  &#x2F;&#x2F;Others
        script.onload = callback;
    }

    script.src = url;
    document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);
}
function redisloaded() {
  status(&#x27;Eval redis script...&#x27;);
}
function parse_result(res, term) {
  var code = res[0];
  if (res == &quot;$-1\r\n&quot;) return &quot;(nil)&quot;;

  var re = &#x2F;\$(-|\d)+\s+&#x2F;gi;

  if (code == &quot;-&quot;) return res; &#x2F;&#x2F; return errors
  if (code == &quot;+&quot;) return res.substr(1).trim();
  if (code == &quot;$&quot;) {
    return &#x27;&quot;&#x27; + res.replace(re, &quot;&quot;).trim() + &#x27;&quot;&#x27;;
  }
  if (code == &quot;:&quot;) {
    return &quot;(integer) &quot; + res.substr(1);
  }
  if (code == &quot;*&quot;) {
    var a = res.split(&#x27;\r\n&#x27;),
      i,y = 1, l = a.length, c, result = &#x27;&#x27;;

    for(i = 0; i &lt; l; ++i) {
      c = a[i];
      if (c[0] == &#x27;*&#x27; || c[0] == &#x27;$&#x27; || c.length == 0) continue;
      term.echo(&#x27;&#x27; + y + &#x27;) &quot;&#x27; + c + &#x27;&quot;&#x27;);
      y++;
    }
    return false;
  }

  return res;
}
var cmds = [&#x27;APPEND&#x27;,
 &#x27;AUTH&#x27;,
 &#x27;BGREWRITEAOF&#x27;,
 &#x27;BGSAVE&#x27;,
 &#x27;BITCOUNT&#x27;,
 &#x27;BITOP&#x27;,
 &#x27;BITPOS&#x27;,
 &#x27;BLPOP&#x27;,
 &#x27;BRPOP&#x27;,
 &#x27;BRPOPLPUSH&#x27;,
 &#x27;CLIENT GETNAME&#x27;,
 &#x27;CLIENT KILL&#x27;,
 &#x27;CLIENT LIST&#x27;,
 &#x27;CLIENT PAUSE&#x27;,
 &#x27;CLIENT SETNAME&#x27;,
 &#x27;CLUSTER SLOTS&#x27;,
 &#x27;COMMAND&#x27;,
 &#x27;COMMAND COUNT&#x27;,
 &#x27;COMMAND GETKEYS&#x27;,
 &#x27;COMMAND INFO&#x27;,
 &#x27;CONFIG GET&#x27;,
 &#x27;CONFIG RESETSTAT&#x27;,
 &#x27;CONFIG REWRITE&#x27;,
 &#x27;CONFIG SET&#x27;,
 &#x27;DBSIZE&#x27;,
 &#x27;DEBUG OBJECT&#x27;,
 &#x27;DEBUG SEGFAULT&#x27;,
 &#x27;DECR&#x27;,
 &#x27;DECRBY&#x27;,
 &#x27;DEL&#x27;,
 &#x27;DISCARD&#x27;,
 &#x27;DUMP&#x27;,
 &#x27;ECHO&#x27;,
 &#x27;EVAL&#x27;,
 &#x27;EVALSHA&#x27;,
 &#x27;EXEC&#x27;,
 &#x27;EXISTS&#x27;,
 &#x27;EXPIRE&#x27;,
 &#x27;EXPIREAT&#x27;,
 &#x27;FLUSHALL&#x27;,
 &#x27;FLUSHDB&#x27;,
 &#x27;GET&#x27;,
 &#x27;GETBIT&#x27;,
 &#x27;GETRANGE&#x27;,
 &#x27;GETSET&#x27;,
 &#x27;HDEL&#x27;,
 &#x27;HEXISTS&#x27;,
 &#x27;HGET&#x27;,
 &#x27;HGETALL&#x27;,
 &#x27;HINCRBY&#x27;,
 &#x27;HINCRBYFLOAT&#x27;,
 &#x27;HKEYS&#x27;,
 &#x27;HLEN&#x27;,
 &#x27;HMGET&#x27;,
 &#x27;HMSET&#x27;,
 &#x27;HSCAN&#x27;,
 &#x27;HSET&#x27;,
 &#x27;HSETNX&#x27;,
 &#x27;HVALS&#x27;,
 &#x27;INCR&#x27;,
 &#x27;INCRBY&#x27;,
 &#x27;INCRBYFLOAT&#x27;,
 &#x27;INFO&#x27;,
 &#x27;KEYS&#x27;,
 &#x27;LASTSAVE&#x27;,
 &#x27;LINDEX&#x27;,
 &#x27;LINSERT&#x27;,
 &#x27;LLEN&#x27;,
 &#x27;LPOP&#x27;,
 &#x27;LPUSH&#x27;,
 &#x27;LPUSHX&#x27;,
 &#x27;LRANGE&#x27;,
 &#x27;LREM&#x27;,
 &#x27;LSET&#x27;,
 &#x27;LTRIM&#x27;,
 &#x27;MGET&#x27;,
 &#x27;MIGRATE&#x27;,
 &#x27;MONITOR&#x27;,
 &#x27;MOVE&#x27;,
 &#x27;MSET&#x27;,
 &#x27;MSETNX&#x27;,
 &#x27;MULTI&#x27;,
 &#x27;OBJECT&#x27;,
 &#x27;PERSIST&#x27;,
 &#x27;PEXPIRE&#x27;,
 &#x27;PEXPIREAT&#x27;,
 &#x27;PFADD&#x27;,
 &#x27;PFCOUNT&#x27;,
 &#x27;PFMERGE&#x27;,
 &#x27;PING&#x27;,
 &#x27;PSETEX&#x27;,
 &#x27;PSUBSCRIBE&#x27;,
 &#x27;PTTL&#x27;,
 &#x27;PUBLISH&#x27;,
 &#x27;PUBSUB&#x27;,
 &#x27;PUNSUBSCRIBE&#x27;,
 &#x27;QUIT&#x27;,
 &#x27;RANDOMKEY&#x27;,
 &#x27;RENAME&#x27;,
 &#x27;RENAMENX&#x27;,
 &#x27;RESTORE&#x27;,
 &#x27;ROLE&#x27;,
 &#x27;RPOP&#x27;,
 &#x27;RPOPLPUSH&#x27;,
 &#x27;RPUSH&#x27;,
 &#x27;RPUSHX&#x27;,
 &#x27;SADD&#x27;,
 &#x27;SAVE&#x27;,
 &#x27;SCAN&#x27;,
 &#x27;SCARD&#x27;,
 &#x27;SCRIPT EXISTS&#x27;,
 &#x27;SCRIPT FLUSH&#x27;,
 &#x27;SCRIPT KILL&#x27;,
 &#x27;SCRIPT LOAD&#x27;,
 &#x27;SDIFF&#x27;,
 &#x27;SDIFFSTORE&#x27;,
 &#x27;SELECT&#x27;,
 &#x27;SET&#x27;,
 &#x27;SETBIT&#x27;,
 &#x27;SETEX&#x27;,
 &#x27;SETNX&#x27;,
 &#x27;SETRANGE&#x27;,
 &#x27;SHUTDOWN&#x27;,
 &#x27;SINTER&#x27;,
 &#x27;SINTERSTORE&#x27;,
 &#x27;SISMEMBER&#x27;,
 &#x27;SLAVEOF&#x27;,
 &#x27;SLOWLOG&#x27;,
 &#x27;SMEMBERS&#x27;,
 &#x27;SMOVE&#x27;,
 &#x27;SORT&#x27;,
 &#x27;SPOP&#x27;,
 &#x27;SRANDMEMBER&#x27;,
 &#x27;SREM&#x27;,
 &#x27;SSCAN&#x27;,
 &#x27;STRLEN&#x27;,
 &#x27;SUBSCRIBE&#x27;,
 &#x27;SUNION&#x27;,
 &#x27;SUNIONSTORE&#x27;,
 &#x27;SYNC&#x27;,
 &#x27;TIME&#x27;,
 &#x27;TTL&#x27;,
 &#x27;TYPE&#x27;,
 &#x27;UNSUBSCRIBE&#x27;,
 &#x27;UNWATCH&#x27;,
 &#x27;WATCH&#x27;,
 &#x27;ZADD&#x27;,
 &#x27;ZCARD&#x27;,
 &#x27;ZCOUNT&#x27;,
 &#x27;ZINCRBY&#x27;,
 &#x27;ZINTERSTORE&#x27;,
 &#x27;ZLEXCOUNT&#x27;,
 &#x27;ZRANGE&#x27;,
 &#x27;ZRANGEBYLEX&#x27;,
 &#x27;ZRANGEBYSCORE&#x27;,
 &#x27;ZRANK&#x27;,
 &#x27;ZREM&#x27;,
 &#x27;ZREMRANGEBYLEX&#x27;,
 &#x27;ZREMRANGEBYRANK&#x27;,
 &#x27;ZREMRANGEBYSCORE&#x27;,
 &#x27;ZREVRANGE&#x27;,
 &#x27;ZREVRANGEBYLEX&#x27;,
 &#x27;ZREVRANGEBYSCORE&#x27;,
 &#x27;ZREVRANK&#x27;,
 &#x27;ZSCAN&#x27;,
 &#x27;ZSCORE&#x27;,
 &#x27;ZUNIONSTORE&#x27;];

function jquery_loaded() {
  status(&#x27;get jquery.terminal&#x27;);
  &#x2F;&#x2F; loadScript(&#x27;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery-mousewheel&#x2F;3.1.12&#x2F;jquery.mousewheel.min.js&#x27;);
  $(&#x27;&lt;link&gt;&#x27;)
    .appendTo(&#x27;head&#x27;)
    .attr({type : &#x27;text&#x2F;css&#x27;, rel : &#x27;stylesheet&#x27;})
    .attr(&#x27;href&#x27;, &#x27;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery.terminal&#x2F;2.14.1&#x2F;css&#x2F;jquery.terminal.min.css&#x27;);

  loadScript(&#x27;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery.terminal&#x2F;2.14.1&#x2F;js&#x2F;jquery.terminal.min.js&#x27;, function() {
      status(&#x27;get redis-server&#x27;);
      $(&#x27;#output&#x27;).terminal(function(command, term) {
        if (command !== &#x27;&#x27;) {
            try {
                rsend(command + &quot;\r\n&quot;);
                var result = rrecv();
                if (result) {
                  var parsed = parse_result(result, term);
                  if (parsed) term.echo(parsed);
                }
            } catch(e) {
                term.error(new String(e));
            }
        } else {
           term.echo(&#x27;&#x27;);
        }
    }, {
        completion: function(text, cb) {
          &#x2F;&#x2F;debugger;
          var suggests = [], i, cmds_len = cmds.length;
          var t = text.toUpperCase(), current,
            t_len  = text.length;

          var on_screen = this.get_command();
          if (on_screen.length &gt; 0 &amp;&amp; on_screen[on_screen.length-1] === &#x27; &#x27;) {
            &#x2F;&#x2F; subcmd search
            cb([]);
            return [];
          } else {
            &#x2F;&#x2F; cmd search
            for (i=0; i &lt; cmds_len; ++i) {
              current = cmds[i];
              if (current.indexOf(t) == 0) suggests.push(text + current.substr(t_len));
            }
          }
          cb(suggests);
          return suggests;
        },
        greetings: &#x27;&#x27;,
        name: &#x27;redis_js_demo&#x27;,
        height: 260,
        prompt: &#x27;redis-js&gt; &#x27;});
    loadScript(&#x27;&#x2F;redis-in-browser&#x2F;redis-server.js&#x27;, redisloaded);

  });
}
window.onload = function() {
  statusElement = document.getElementById(&#x27;status&#x27;);
  document.getElementById(&#x27;run&#x27;).addEventListener(&#x27;click&#x27;, function() {
    this.disabled = &quot;disabled&quot;;
    status(&#x27;get jquery&#x27;);
    loadScript(&#x27;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&#x27;, jquery_loaded);
  });
}
&lt;&#x2F;script&gt;</description>
            </item>
        
    </channel>
</rss>
